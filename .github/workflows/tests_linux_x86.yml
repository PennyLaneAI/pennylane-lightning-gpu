name: Tests::Linux::x86_64
on:
  release:
  push:
    branches:
      - main
  pull_request:

env:
  COVERAGE_FLAGS: "--cov=pennylane_lightning_gpu --cov-report=term-missing --cov-report=xml:./coverage.xml --no-flaky-report -p no:warnings --tb=native" 
  GCC_VERSION: 11
  OMP_NUM_THREADS: "2"
  CI_CUDA_ARCH: 86

concurrency:
  group: gpu-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cpptests:
    runs-on:
      - self-hosted
      - ubuntu-22.04
      - gpu

    strategy:
      max-parallel: 1

    steps:
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Remove Ubuntu unattended upgrades
        run: sudo apt-get remove -y -q unattended-upgrades

      - name: Install required packages
        run: |
          sudo apt-get update && sudo apt-get -y -q install gcc-${{ env.GCC_VERSION }} g++-${{ env.GCC_VERSION }} gcovr lcov
          python -m pip install ninja cmake~=3.24.3 custatevec-cu11 
          
      - name: Checkout pennyLane-lightning-gpu
        uses: actions/checkout@v3

      - name: Validate GPU version and installed compiler
        run: |
          nvidia-smi
          /usr/local/cuda/bin/nvcc --version

      - name: Build and run unit tests
        run: |
            cmake . -BBuild \
              -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DPLLGPU_BUILD_TESTS=ON \
              -DCMAKE_CXX_COMPILER="$(which g++-${{ env.GCC_VERSION }})" \
              -DLIGHTNING_RELEASE_TAG="master" \
              -DCMAKE_CUDA_COMPILER="/usr/local/cuda/bin/nvcc" \
              -DCMAKE_CUDA_ARCHITECTURES="86" \
              -G Ninja
            cmake --build ./Build
            cd ./Build
            mkdir -p ./tests/results
            ./pennylane_lightning_gpu/src/tests/runner_gpu --order lex --reporter junit --out ./tests/results/report_${{ github.job }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ubuntu-tests-reports
          path: ./Build/tests/results/report_${{ github.job }}.xml

      - name: Build and run unit tests for code coverage
        run: |
            cmake . -BBuildCov \
              -DCMAKE_BUILD_TYPE=Debug \
              -DPLLGPU_BUILD_TESTS=ON \
              -DPLLGPU_ENABLE_COVERAGE=ON \
              -DCMAKE_CXX_COMPILER="$(which g++-${{ env.GCC_VERSION }})" \
              -DLIGHTNING_RELEASE_TAG="master" \
              -DCMAKE_CUDA_COMPILER="/usr/local/cuda/bin/nvcc" \
              -DCMAKE_CUDA_ARCHITECTURES="86" \
              -G Ninja
            cmake --build ./BuildCov
            cd ./BuildCov
            ./pennylane_lightning_gpu/src/tests/runner_gpu
            lcov --directory . -b ../pennylane_lightning_gpu/src --capture --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            mv coverage.info coverage-${{ github.job }}.info

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp
          path: ./BuildCov/coverage-${{ github.job }}.info

      - name: Cleanup
        if: always()
        run: |
          rm -rf *
          rm -rf .git
          rm -rf .gitignore
          rm -rf .github


  pythontests:
    runs-on:
      - self-hosted
      - ubuntu-22.04
      - gpu

    strategy:
      max-parallel: 1

    steps:
      - name: Checkout pennyLane-lightning-gpu
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      # Since the self-hosted runner can be re-used. It is best to set up all package
      # installations in a virtual environment that gets cleaned at the end of each workflow run
      - name: Setup Python virtual environment
        id: setup_venv
        env:
          VENV_NAME: venv_${{ steps.setup_python.outputs.python-version }}_${{ github.sha }}

        run: |
          # Clear any pre-existing venvs
          rm -rf venv_*

          # Create new venv for this workflow_run
          python3 --version
          python3 -m venv ${{ env.VENV_NAME }}

          # Add the venv to PATH for subsequent steps
          echo ${{ env.VENV_NAME }}/bin >> $GITHUB_PATH

          # Adding venv name as an output for subsequent steps to reference if needed
          source ${{ env.VENV_NAME }}/bin/activate
          echo "venv_name=${{ env.VENV_NAME }}" >> $GITHUB_OUTPUT

      - name: Install required packages
        run: |
          source ${{ steps.setup_venv.outputs.venv_name }}/bin/activate
          python3 -m pip install pip~=22.0
          python3 -m pip install ninja cmake custatevec-cu11 pytest pytest-mock flaky pytest-cov
          sudo apt-get update && sudo apt-get -y -q install gcc-${{ env.GCC_VERSION }} g++-${{ env.GCC_VERSION }} gcovr lcov
          # Sync with latest master branches
          python3 -m pip install git+https://github.com/PennyLaneAI/pennylane.git@master
          python3 -m pip install --index-url https://test.pypi.org/simple/ pennylane-lightning --pre --force-reinstall --no-deps
          
      - name: Build and install package
        env: 
          CUQUANTUM_SDK: $(python -c "import site; print( f'{site.getsitepackages()[0]}/cuquantum/lib')")
        run: |
          source ${{ steps.setup_venv.outputs.venv_name }}/bin/activate
          python3 setup.py build_ext -i --define="CMAKE_CXX_COMPILER=$(which g++-${{ env.GCC_VERSION }});LIGHTNING_RELEASE_TAG=master;CMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc;CMAKE_CUDA_ARCHITECTURES=${{ env.CI_CUDA_ARCH }}"
          python3 -m pip install -e . --verbose

      - name: Run PennyLane-Lightning-GPU unit tests
        run: |
          source ${{ steps.setup_venv.outputs.venv_name }}/bin/activate
          python3 -m pytest ./tests/ ${{ env.COVERAGE_FLAGS }}
          pl-device-test --device lightning.gpu --skip-ops --shots=20000 ${{ env.COVERAGE_FLAGS }} --cov-append
          pl-device-test --device lightning.gpu --shots=None --skip-ops ${{ env.COVERAGE_FLAGS }} --cov-append
          mv coverage.xml coverage-${{ github.job }}.xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-python
          path: ./coverage-${{ github.job }}.xml

      - name: Cleanup
        if: always()
        run: |
          rm -rf ${{ steps.setup_venv.outputs.venv_name }}
          rm -rf *
          rm -rf .git
          rm -rf .gitignore
          rm -rf .github
